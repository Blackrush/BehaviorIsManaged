<#@ template language="C#" debug="true"  #>
<#@ output extension=".java" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DofusProtocolBuilder.Parsing" #>
<#@ parameter name="Type" type="DofusProtocolBuilder.XmlPatterns.XmlType" #>
<#@ parameter name="Profile" type="DofusProtocolBuilder.Profiles.ParsingProfile" #>
<#@ include file="./Helper.tt"#>
// Generated on <#= DateTime.Now #>
package <#= Profile.OutPutNamespace #>;

import <#= Program.Configuration.BaseNamespace #>.ProtocolTypeManager;
import <#= Program.Configuration.BaseNamespace #>.enums.*;
import org.behaviorismanaged.core.io.*;
import org.behaviorismanaged.core.network.*;

<#
	if (Program.Configuration.UseLombok)
    {
		WriteLine("@lombok.ToString(callSuper={0}, includeFieldNames=true)", !string.IsNullOrEmpty(Type.Heritage) && Type.Heritage != "Object" ? "true" : "false");
		WriteLine("@lombok.EqualsAndHashCode(callSuper={0})", !string.IsNullOrEmpty(Type.Heritage) && Type.Heritage != "Object" ? "true" : "false");
    }
#>
public class <#= Type.Name #> extends <#= !string.IsNullOrEmpty(Type.Heritage) && Type.Heritage != "Object" ? Type.Heritage : "NetworkType" #> {
<# PushIndent("    "); #>
public static final short PROTOCOL_ID = <#=Type.Id #>;

@Override
public short getProtocolId() {
    return PROTOCOL_ID;
}

<#
foreach (var field in Type.Fields)
{
    WriteField(field);
} 
#>

public <#=Type.Name #>() { }

<#
    var baseFields = GetHierarchyFields(Type);

    if (Type.Fields.Length + baseFields.Length > 0)
    {
        Write("public " + Type.Name + "(");

        if (baseFields.Length > 0)
        {
            Write(string.Join(", ", baseFields.Select(field => GetRealType(field.Type) + " " + field.Name)));

            if (Type.Fields.Length > 0)
                Write(", ");
        }

        if (Type.Fields.Length > 0)
        {
            Write(string.Join(", ", Type.Fields.Select(field => GetRealType(field.Type) + " " + field.Name)));
        }

        WriteLine(") {");
        PushIndent("    ");

        if (baseFields.Length > 0)
            WriteLine("super(" + string.Join(", ", baseFields.Select(field => field.Name)) + ");");

        foreach (var field in Type.Fields)
        {
            WriteLine("this." + field.Name + " = " + field.Name + ";");
        }

        PopIndent();
        WriteLine("}");
    }
#>

@Override
public void serialize(DataWriter writer) {
<# PushIndent("    "); #>
<#
    if (!string.IsNullOrEmpty(Type.Heritage)
        && Type.Heritage != "Object")
    {
        WriteLine("super.serialize(writer);");
    }

    WriteIOMethodStatements(Type.Fields, true);
#>
<# PopIndent(); #>
}

@Override
public void deserialize(DataReader reader) {
<# PushIndent("    "); #>
<#
    if (!string.IsNullOrEmpty(Type.Heritage)
        && Type.Heritage != "Object")
    {
        WriteLine("super.deserialize(reader);");
    }

    WriteIOMethodStatements(Type.Fields, false);
#>
<# PopIndent(); #>
}

<# PopIndent(); #>
}