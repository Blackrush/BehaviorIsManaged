<#@ template language="C#" debug="true"  #>
<#@ output extension=".java" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DofusProtocolBuilder.Parsing" #>
<#@ parameter name="Message" type="DofusProtocolBuilder.XmlPatterns.XmlMessage" #>
<#@ parameter name="Profile" type="DofusProtocolBuilder.Profiles.ParsingProfile" #>
<#@ include file="./Helper.tt"#>
// Generated on <#= DateTime.Now #>
package <#= Profile.OutPutNamespace #>;

import <#=Program.Configuration.BaseNamespace #>.types.*;
import org.behaviorismanaged.core.io.*;
import org.behaviorismanaged.core.network.*;

public class <#= Message.Name #> extends <#= !string.IsNullOrEmpty(Message.Heritage) && Message.Heritage != "Message" ? Message.Heritage : "NetworkMessage" #> {
<# PushIndent("    "); #>
public static final long PROTOCOL_ID = <#= Message.Id #>L;

@Override
public long getProtocolId() {
	return PROTOCOL_ID;
}

<#
foreach (var field in Message.Fields)
{
    WriteField(field);
} 
#>

public <#= Message.Name #>() { }

<#
    var baseFields = GetHierarchyFields(Message);

    if (Message.Fields.Length + baseFields.Length > 0)
    {
        Write("public {0}(", Message.Name);

        if (baseFields.Length > 0)
        {
            Write(string.Join(", ", baseFields.Select(field => GetRealType(field.Type) + " " + field.Name)));

            if (Message.Fields.Length > 0)
                Write(", ");
        }
        
        if (Message.Fields.Length > 0)
        {
            Write(string.Join(", ", Message.Fields.Select(field => GetRealType(field.Type) + " " + field.Name)));
        }

        WriteLine(") {");

        PushIndent("    ");

        if (baseFields.Length > 0)
            WriteLine("super({0});", string.Join(", ", baseFields.Select(field => field.Name)));


        foreach (var field in Message.Fields)
        {
            WriteLine("this." + field.Name + " = " + field.Name + ";");
        }

        PopIndent();
        WriteLine("}");
    }
#>

@Override
public void serialize(DataWriter writer) {
<# PushIndent("    "); #>
<#
    if (Message.Heritage != "Message")
    {
        WriteLine("super.serialize(writer);");
    }

    WriteIOMethodStatements(Message.Fields, true);
#>
<# PopIndent(); #>
}

@Override
public void deserialize(DataReader reader) {
<# PushIndent("    "); #>
<#
    if (Message.Heritage != "Message")
    {
        WriteLine("super.deserialize(reader);");
    }

    WriteIOMethodStatements(Message.Fields, false);
#>
<# PopIndent(); #>
}

<# PopIndent(); #>
}
